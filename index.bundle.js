"use strict";(self.webpackChunkjs_battleship=self.webpackChunkjs_battleship||[]).push([[57],{897:(e,n,t)=>{var r=t(72),a=t.n(r),o=t(825),s=t.n(o),i=t(659),l=t.n(i),A=t(56),c=t.n(A),d=t(540),p=t.n(d),m=t(113),u=t.n(m),g=t(365),h={};h.styleTagTransform=u(),h.setAttributes=c(),h.insert=l().bind(null,"head"),h.domAPI=s(),h.insertStyleElement=p(),a()(g.A,h),g.A&&g.A.locals&&g.A.locals;const E="hit",y="miss",f="horizontal",B="vertical",C=10,b="player2-board",v="Game started!",I={INVALID_ORIENTATION:"Invalid orientation. Use 'horizontal' or 'vertical'.",INVALID_COORDINATES:"Ship placement coorindates are out of bounds [0-10].",INVALID_SHIP:"Ship must be provided.",OUT_OF_BOUNDS_HORIZONTAL:"Ship placement is out of bounds horizontally.",OUT_OF_BOUNDS_VERTICAL:"Ship placement is out of bounds vertically.",OVERLAPPING_SHIP:"Cannot place ship; position is already occupied.",ALREADY_ATTACKED:"This coordinate has already been attacked.",PLAYER1_BOARD_FAILED:"Player 1 Gameboard creation failed.",PLAYER2_BOARD_FAILED:"Player 2 Gameboard creation failed.",PLAYER_REQUIRED:"Both players are required to initialize game.",INVALID_PLAYER_OBJECT:"Invalid player objects provided.",INVALID_PLAYER:"Invalid player provided.",UNIQUE_NAME:"Players must have unique names.",GAMEBOARDS_REQUIRED:"Both players must have gameboards before initializing game.",GAMECONTROLLER_INIT_ERROR:"Error initializing GameController:",CONTAINER_NOT_FOUND:"Container not found.",ALREADY_STARTED:"Game has already started.",GAME_OVER:"Game is already over.",GAME_NOT_INITIALIZED:"Game not initialized",NO_VALID_MOVES:"No valid moves available.",GAME_REQUIRED:"Game instance is required",UI_REQUIRED:"UI instance is required",INVALID_PLAYERS_COUNT:"Exactly 2 players must be provided",INVALID_PLAYER:"Invalid player object provided",INVALID_GAMEBOARDS_COUNT:"Exactly 2 gameboards must be provided"},w="human",x="Alice",k="player1",N="computer",S="Computer",D="player2",T=(e,n,t)=>{if(e!==w&&e!==N)throw new Error(I.INVALID_PLAYER_TYPE);if(!n||""===n.trim())throw new Error(I.INVALID_PLAYER_NAME);if(!t||""===t.trim())throw new Error(I.INVALID_PLAYER_ID);let r=null,a=[],o=null;const s=e=>a.length>0?i(e):A(e),i=e=>{const n=a[a.length-1];if(a.length>1)return l(e);const t=[{x:n.x+1,y:n.y},{x:n.x-1,y:n.y},{x:n.x,y:n.y+1},{x:n.x,y:n.y-1}].filter((n=>c(n.x,n.y,e)));return t.length>0?t[Math.floor(Math.random()*t.length)]:(a=[],A(e))},l=e=>{const n=a[0],t=a[a.length-1];o||(o=n.x===t.x?"vertical":"horizontal");const r=[];"horizontal"===o?r.push({x:Math.min(...a.map((e=>e.x)))-1,y:n.y},{x:Math.max(...a.map((e=>e.x)))+1,y:n.y}):r.push({x:n.x,y:Math.min(...a.map((e=>e.y)))-1},{x:n.x,y:Math.max(...a.map((e=>e.y)))+1});const s=r.filter((n=>c(n.x,n.y,e)));return s.length>0?s[Math.floor(Math.random()*s.length)]:(o=null,i(e))},A=e=>{const n=e.getSize(),t=[];for(let r=0;r<n;r++)for(let a=r%2;a<n;a+=2)c(a,r,e)&&t.push({x:a,y:r});if(0===t.length)for(let r=0;r<n;r++)for(let a=0;a<n;a++)c(a,r,e)&&t.push({x:a,y:r});return t[Math.floor(Math.random()*t.length)]},c=(e,n,t)=>e>=0&&e<t.getSize()&&n>=0&&n<t.getSize()&&!t.hasBeenAttacked(e,n);return{attack:(e,n,t)=>{if("number"!=typeof e||"number"!=typeof n||e<0||n<0||e>=t.getSize()||n>=t.getSize())throw new Error(I.INVALID_COORDINATES);if(t.hasBeenAttacked(e,n))throw new Error(I.ALREADY_ATTACKED);const r=t.receiveAttack(e,n);return"hit"===r.result&&(a.push({x:e,y:n}),r.sunk&&(a=[],o=null)),r},getName:()=>n,getId:()=>t,getType:()=>e,getGameboard:()=>r,setGameboard:e=>{r=e},getValidCoordinates:e=>{let n,t;do{n=Math.floor(Math.random()*C),t=Math.floor(Math.random()*C)}while(e.hasBeenAttacked(n,t));return[n,t]},getNextMove:n=>{if(!n)throw new Error(I.INVALID_GAMEBOARD);const t=n.getSize();let r=!1;for(let e=0;e<t;e++){for(let a=0;a<t;a++)if(!n.hasBeenAttacked(a,e)){r=!0;break}if(r)break}if(!r)throw new Error(I.NO_VALID_MOVES);return"computer"===e?s(n):null},makeSmartMove:s,makeRandomMove:()=>{if(!r)throw new Error("No gameboard set");const e=r.getSize(),n=r.getAllAttacks();for(;;){const t=Math.floor(Math.random()*e),r=Math.floor(Math.random()*e);if(!n.has(`${t},${r}`))return{x:t,y:r}}}}},_=(e,n)=>{if(!Number.isInteger(n)||n<1)throw new Error("Length must be a positive integer.");let t=0;return{hit:()=>{t<n&&(t+=1)},getHits:()=>t,getLength:()=>n,getType:()=>e,isSunk:()=>t===n}},L=()=>({ship:null,shipType:null,isHit:!1,hasBeenAttacked:!1,status:"empty"}),O=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:C,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],t=[],r=[],a=[],o=[],s=new Set;const i=()=>{t=((e,n)=>Array(e).fill(null).map((()=>Array(e).fill(null).map((()=>n())))))(e,L)},l=(e,n,a,o)=>{A(e,n,a,o),c(e,n,a,o),d(e,n,a,o),((e,n,a,o)=>{const s=e.getLength(),i=[];for(let r=0;r<s;r++){const s=o===f?n+r:n,l=o===B?a+r:a;t[l][s].ship=e,t[l][s].shipType=e.getType(),t[l][s].status="ship",i.push({x:s,y:l})}r.includes(e)||r.push({ship:e,positions:i})})(e,n,a,o)},A=(n,t,r,a)=>{if(!n)throw new Error(I.INVALID_SHIP);if(a!==f&&a!==B)throw new Error(I.INVALID_ORIENTATION);if(!Number.isInteger(t)||!Number.isInteger(r)||t<0||t>=e||r<0||r>=e)throw new Error(I.INVALID_COORDINATES)},c=(n,t,r,a)=>{const o=n.getLength();if(a===f&&t+o>e)throw new Error(I.OUT_OF_BOUNDS_HORIZONTAL);if(a===B&&r+o>e)throw new Error(I.OUT_OF_BOUNDS_VERTICAL)},d=(e,n,r,a)=>{const o=e.getLength();for(let e=0;e<o;e++){const o=a===f?n+e:n;if(null!==t[a===B?r+e:r][o].ship)throw new Error(I.OVERLAPPING_SHIP)}};return i(),{getBoard:()=>t,getSize:()=>e,getShips:()=>n,getPlacedShips:()=>r,placeShip:l,placeShipsRandomly:()=>{if(!n||!Array.isArray(n)||0===n.length)throw new Error("No ships provided for random placement");(()=>{const t=n.reduce(((e,n)=>e+n.length),0),r=e*e;if(t>r)throw new Error(`Ships require ${t} spaces but board only has ${r} spaces`)})();const t=[f,B];for(let r of n){let n=!1,a=0;const o=_(r.type,r.length);for(;!n&&a<100;){a++;const s=Math.floor(Math.random()*e),i=Math.floor(Math.random()*e),A=t[Math.floor(Math.random()*t.length)];try{l(o,s,i,A),n=!0}catch(e){if(a>=100)throw new Error(`Unable to place ship length ${r.length} after 100 attempts`)}}}},receiveAttack:(n,r)=>{if(n<0||n>=e||r<0||r>=e)throw new Error(I.INVALID_COORDINATES);const s=t[r][n];if(s.hasBeenAttacked)throw new Error(I.ALREADY_ATTACKED);return s.hasBeenAttacked=!0,null!==s.ship?(s.ship.hit(),s.status=E,a.push({x:n,y:r}),{result:E,shipType:s.shipType,sunk:s.ship.isSunk(),coordinates:{x:n,y:r}}):(s.status=y,o.push({x:n,y:r}),{result:y,shipType:null,sunk:!1,coordinates:{x:n,y:r}})},hasBeenAttacked:(e,n)=>t[n][e].hasBeenAttacked,getAllAttacks:()=>(a.forEach((e=>{let{x:n,y:t}=e;s.add(`${n},${t}`)})),o.forEach((e=>{let{x:n,y:t}=e;s.add(`${n},${t}`)})),s),getMissedAttacks:()=>o,getHits:()=>a,areAllShipsSunk:()=>0!==r.length&&r.every((e=>e.ship.isSunk())),allShipsPlaced:()=>{const e=n.reduce(((e,n)=>e+n.length),0);let r=0;return t.forEach((e=>{e.forEach((e=>{null!==e.ship&&r++}))})),{allPlaced:r===e,placed:r}},reset:()=>{i(),r=[],a=[],o=[],s.clear()},getSunkShipsCount:()=>r.reduce(((e,n)=>{let{ship:t}=n;return e+(t.isSunk()?1:0)}),0)}},R=[{type:"Carrier",length:5},{type:"Battleship",length:4},{type:"Cruiser",length:3},{type:"Submarine",length:3},{type:"Destroyer",length:2}],M="board-cell",z="disabled",G="hit",P="miss",U="sunk",V="message",$="score",Y="current-player",F="game",j="game-over",H=T(w,x,k),q=T(N,S,D),Q=O(C,[...R]),Z=O(C,[...R]);H.setGameboard(Q),q.setGameboard(Z);const W=(()=>{const e=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const t=document.createElement(e);return n.id&&(t.id=n.id),n.classes&&t.classList.add(...n.classes),n.textContent&&(t.textContent=n.textContent),n.parent&&n.parent.appendChild(t),t},n=function(n,t){let r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const a=document.getElementById(t);if(!a)throw new Error(I.CONTAINER_NOT_FOUND);const o=a._handleAttack;a.innerHTML="",n.forEach(((n,t)=>{const s=e("div",{classes:["board-row"],parent:a});n.forEach(((n,a)=>{const i=e("div",{classes:[M],parent:s});i.dataset.x=a,i.dataset.y=t,n.ship&&r&&(i.classList.add("ship"),n.ship.isSunk()&&i.classList.add(U)),n.status===E&&(i.classList.add(G),n.ship&&n.ship.isSunk()&&i.classList.add(U)),n.status===y&&i.classList.add(P),o&&i.addEventListener("click",(e=>{i.classList.contains(G)||i.classList.contains(P)||i.classList.contains(U)||(console.log(`Board clicked: ${a},${t}`),o(a,t))}))}))}))},t=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"info",t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const r=document.getElementById(V);r&&(r.textContent=e,r.className=`message ${n}`,t>0&&setTimeout((()=>{r.textContent="",r.className="message"}),t))},r=(n,t,r,a)=>{n&&r?(document.getElementById($)||e("div",{id:$,parent:document.body})).textContent=`${n.getName()}: ${t} | ${r.getName()}: ${a}`:console.error("Missing player information for score update")},a=n=>{(document.getElementById(Y)||e("div",{id:Y,parent:document.body})).textContent=`Current Player: ${n.getName()}`,document.querySelectorAll(".player-section").forEach((e=>{e.classList.toggle("current",e.querySelector("h2").textContent===n.getName())}))};return{initUI:(o,s)=>{const i=[o,s];e("h1",{textContent:"Battleship",parent:document.body}),r(o,0,s,0),a(o),e("div",{id:V,parent:document.body});const l=e("div",{id:F,parent:document.body});i.forEach(((n,t)=>{((n,t,r)=>{const a=e("div",{classes:["player-section"],parent:r});e("h2",{textContent:n.getName(),parent:a}),e("div",{id:`player${t+1}-board`,classes:["board"],parent:a})})(n,t,l)})),n(o.getGameboard().getBoard(),"player1-board",!0),n(s.getGameboard().getBoard(),"player2-board",!1),t(v)},resetUI:()=>{const e=document.getElementById(F);if(e){const n=document.getElementById(V);e.innerHTML="",n&&e.appendChild(n)}const n=document.querySelector("h1");n&&n.remove();const t=document.getElementById($);t&&t.remove();const r=document.getElementById(Y);r&&r.remove();const a=document.getElementById(V);a&&(a.textContent="")},renderBoard:n,displayMessage:t,updateScore:r,updateCurrentPlayer:a,addBoardEventListeners:(e,n)=>{const t=document.getElementById(e);if(!t)throw new Error(I.CONTAINER_NOT_FOUND);const r=t.getElementsByClassName(M);Array.from(r).forEach((e=>{e.addEventListener("click",(()=>{if(!e.classList.contains(G)&&!e.classList.contains(P)&&!e.classList.contains(U)){const t=parseInt(e.dataset.x),r=parseInt(e.dataset.y);n(t,r)}}))}))},showGameOverScreen:n=>{const t=document.getElementById(j);t&&t.remove();const r=e("div",{id:j,classes:["overlay"],parent:document.body}),a=e("div",{classes:["game-over-content"],parent:r});e("h2",{textContent:`${n} wins!`,parent:a}),e("button",{textContent:"Play Again",classes:["play-again-button"],parent:a}).addEventListener("click",(()=>{location.reload()}))},enableBoardInteraction:e=>{const n=document.getElementById(e);if(!n)throw new Error(I.CONTAINER_NOT_FOUND);n.classList.remove(z),n.style.pointerEvents="auto"},disableBoardInteraction:e=>{const n=document.getElementById(e);if(!n)throw new Error(I.CONTAINER_NOT_FOUND);n.classList.add(z),n.style.pointerEvents="none"}}})(),K=function(){let e,n=!1,t=!1,r={},a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const s=["getName","getType","getId","setGameboard","getGameboard"],i=()=>{r[a.getName()]=0,r[o.getName()]=0},l=(e,n)=>{s.forEach((t=>{if("function"!=typeof e[t])throw new Error(`${n} is missing required method: ${t}`)}))},A=(n,t)=>{if(m())throw new Error(I.GAME_OVER);const a=p().getGameboard();if("number"!=typeof n||"number"!=typeof t||n<0||t<0||n>=C||t>=C)throw new Error(I.INVALID_COORDINATES);if(a.hasBeenAttacked(n,t))throw new Error(I.ALREADY_ATTACKED);const o=a.receiveAttack(n,t);return o.sunk&&(e=>{const n=e.getName();r[n]+=1})(e),a.areAllShipsSunk()&&g(!0),o},c=()=>e,d=n=>{if(!n||![a,o].includes(n))throw new Error(I.INVALID_PLAYER);e=n},p=()=>e===a?o:a,m=()=>t,u=e=>{n=e},g=e=>{t=e};return{initializeGame:()=>{if(!a||!o)throw new Error(I.PLAYER_REQUIRED);if(n)throw new Error(I.ALREADY_STARTED);if(l(a,"Player1"),l(o,"Player2"),a.getName()===o.getName())throw new Error(I.UNIQUE_NAME);if(!a.getGameboard()||!o.getGameboard())throw new Error(I.GAMEBOARDS_REQUIRED);return d(a),i(),u(!0),g(!1),{player1:a,player2:o,currentPlayer:e}},resetGame:()=>{try{if(!a||!o)throw new Error(I.GAME_NOT_INITIALIZED);d(a),i(),g(!1),u(!1),a.getGameboard().reset(),o.getGameboard().reset()}catch(e){throw console.error("Game reset error:",e),e}},getPlayers:()=>[a,o],getCurrentPlayer:c,getOpponent:p,isGameOver:m,isGameStarted:()=>n,getScore:()=>({...r}),attack:A,switchTurn:()=>{m()||(e=e===a?o:a)},handleComputerTurn:()=>{const e=c(),n=p();if("computer"===e.getType()){const t=e.getNextMove(n.getGameboard());return A(t.x,t.y)}return null}}}(H,q),J=function(e,n){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];if(!e)throw new Error(I.GAME_REQUIRED);if(!n)throw new Error(I.UI_REQUIRED);if(t.length>0&&2!==t.length)throw new Error(I.INVALID_PLAYERS_COUNT);if(r.length>0&&2!==r.length)throw new Error(I.INVALID_GAMEBOARDS_COUNT);try{const[a,o]=2===t.length?t:[T(w,x,k),T(N,S,D)],[s,i]=2===r.length?r:[],l=function(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];try{const n=e.getGameboard();if(t)n.placeShipsRandomly();else{const e=R.map((e=>_(e.length)));n.placeShip(e[0],0,0,f)}}catch(e){throw n.displayMessage(e.message),e}},A=()=>{if(e.isGameStarted())throw new Error(I.GAME_ALREADY_STARTED);try{return l(a,!0),l(o,!0),e.initializeGame(a,o),n.initUI(a,o),n.addBoardEventListeners(b,d),"human"===e.getCurrentPlayer().getType()&&n.enableBoardInteraction(b),n.displayMessage(v),!0}catch(e){throw n.displayMessage(e.message),e}},c=()=>{e.resetGame(),n.resetUI(),l(a,!0),l(o,!0),A()},d=(t,r)=>{try{if(e.isGameOver())throw new Error(I.GAME_OVER);if("computer"===e.getCurrentPlayer().getType())return;let a=e.attack(t,r);return p(a),e.isGameOver()||"computer"!==e.getCurrentPlayer().getType()||setTimeout((()=>{try{const n=e.getCurrentPlayer(),t=e.getOpponent().getGameboard(),r=n.makeSmartMove(t);a=e.attack(r.x,r.y),p(a)}catch(e){n.displayMessage("Error during computer move: "+e.message)}}),1e3),a}catch(e){throw n.displayMessage(e.message),e}},p=t=>{const r=e.getCurrentPlayer(),s=e.getOpponent(),i="hit"===t.result?`${r.getName()} hit ${s.getName()}'s ${t.shipType}!`:`${r.getName()} missed`;if(n.displayMessage(i),t.sunk){const e=`${r.getName()} sunk ${s.getName()}'s ${t.shipType}!`;n.displayMessage(e);const i=o.getGameboard().getSunkShipsCount(),l=a.getGameboard().getSunkShipsCount();n.updateScore(a,i,o,l)}if(n.renderBoard(a.getGameboard().getBoard(),"player1-board",!0),n.renderBoard(o.getGameboard().getBoard(),b,!1),n.addBoardEventListeners(b,d),e.isGameOver())return n.showGameOverScreen(r.getName()),void n.disableBoardInteraction(b);e.switchTurn();const l=e.getCurrentPlayer();n.updateCurrentPlayer(l),"human"===l.getType()?n.enableBoardInteraction(b):n.disableBoardInteraction(b)};return{startGame:A,restartGame:c,handleAttack:d,getPlayers:()=>[a,o],placeShipsForPlayer:l}}catch(e){throw n.displayMessage(e.message),e}}(K,W,[H,q],[Q,Z]);document.addEventListener("DOMContentLoaded",(()=>{try{J.startGame()}catch(e){console.error("Failed to start game:",e)}}))},365:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(354),a=t.n(r),o=t(314),s=t.n(o)()(a());s.push([e.id,"/* Base styles */\n:root {\n  --cell-size-desktop: 40px;\n  --cell-size-tablet: 35px;\n  --cell-size-mobile: 30px;\n  --gap-desktop: 50px;\n  --gap-tablet: 30px;\n  --gap-mobile: 20px;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 1rem;\n  min-height: 100vh;\n  margin: 0;\n}\n\n/* Score and Current Player */\n#score,\n#current-player,\n#message {\n  text-align: center;\n  margin-bottom: 0.5rem;\n  width: 100%;\n}\n\n/* Game Container */\n#game {\n  display: flex;\n  gap: var(--gap-desktop);\n  margin-top: 10px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n/* Player Sections */\n.player-section {\n  text-align: center;\n}\n\n/* Game Boards */\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, var(--cell-size-desktop));\n  grid-template-rows: repeat(10, var(--cell-size-desktop));\n  gap: 2px;\n  background-color: #eee;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.board-cell {\n  width: var(--cell-size-desktop);\n  height: var(--cell-size-desktop);\n  background-color: #fff;\n  border: 1px solid #ccc;\n  cursor: pointer;\n}\n\n/* Tablet Styles */\n@media screen and (max-width: 1024px) {\n  .board {\n    grid-template-columns: repeat(10, var(--cell-size-tablet));\n    grid-template-rows: repeat(10, var(--cell-size-tablet));\n  }\n\n  .board-cell {\n    width: var(--cell-size-tablet);\n    height: var(--cell-size-tablet);\n  }\n\n  #game {\n    gap: var(--gap-tablet);\n  }\n\n  h1 {\n    font-size: 1.8rem;\n  }\n\n  h2 {\n    font-size: 1.3rem;\n  }\n}\n\n/* Mobile Styles */\n@media screen and (max-width: 768px) {\n  .board {\n    grid-template-columns: repeat(10, var(--cell-size-mobile));\n    grid-template-rows: repeat(10, var(--cell-size-mobile));\n  }\n\n  .board-cell {\n    width: var(--cell-size-mobile);\n    height: var(--cell-size-mobile);\n  }\n\n  #game {\n    gap: var(--gap-mobile);\n    flex-direction: column;\n    align-items: center;\n  }\n\n  h1 {\n    font-size: 1.5rem;\n  }\n\n  h2 {\n    font-size: 1.2rem;\n  }\n\n  .player-section {\n    margin-bottom: 1rem;\n  }\n}\n\n/* Game Over Modal - make it responsive */\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  padding: 1rem;\n}\n\n.game-over-content {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  max-width: 90%;\n  width: auto;\n}\n\n.play-again-button {\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  margin-top: 1rem;\n}\n\n.play-again-button:hover {\n  background-color: #45a049;\n}\n\n/* Cell States - keep existing styles */\n.ship {\n  background-color: #666;\n}\n.hit {\n  background-color: #ff4444;\n}\n.miss {\n  background-color: #44aaff;\n}\n.sunk {\n  background-color: #000;\n}\n#player2-board .sunk {\n  background-color: #8b0000;\n}\n\n/* Transitions */\n.board-cell {\n  transition: background-color 0.3s ease;\n}\n\n/* Accessibility */\n@media (prefers-reduced-motion: reduce) {\n  .board-cell {\n    transition: none;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA,gBAAgB;AAChB;EACE,yBAAyB;EACzB,wBAAwB;EACxB,wBAAwB;EACxB,mBAAmB;EACnB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,8BAA8B;EAC9B,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;EACT,aAAa;EACb,iBAAiB;EACjB,SAAS;AACX;;AAEA,6BAA6B;AAC7B;;;EAGE,kBAAkB;EAClB,qBAAqB;EACrB,WAAW;AACb;;AAEA,mBAAmB;AACnB;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;EAChB,eAAe;EACf,uBAAuB;AACzB;;AAEA,oBAAoB;AACpB;EACE,kBAAkB;AACpB;;AAEA,gBAAgB;AAChB;EACE,aAAa;EACb,2DAA2D;EAC3D,wDAAwD;EACxD,QAAQ;EACR,sBAAsB;EACtB,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,+BAA+B;EAC/B,gCAAgC;EAChC,sBAAsB;EACtB,sBAAsB;EACtB,eAAe;AACjB;;AAEA,kBAAkB;AAClB;EACE;IACE,0DAA0D;IAC1D,uDAAuD;EACzD;;EAEA;IACE,8BAA8B;IAC9B,+BAA+B;EACjC;;EAEA;IACE,sBAAsB;EACxB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;AACF;;AAEA,kBAAkB;AAClB;EACE;IACE,0DAA0D;IAC1D,uDAAuD;EACzD;;EAEA;IACE,8BAA8B;IAC9B,+BAA+B;EACjC;;EAEA;IACE,sBAAsB;IACtB,sBAAsB;IACtB,mBAAmB;EACrB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,mBAAmB;EACrB;AACF;;AAEA,yCAAyC;AACzC;EACE,eAAe;EACf,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,oCAAoC;EACpC,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;EACb,aAAa;AACf;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,kBAAkB;EAClB,kBAAkB;EAClB,yCAAyC;EACzC,cAAc;EACd,WAAW;AACb;;AAEA;EACE,sBAAsB;EACtB,eAAe;EACf,eAAe;EACf,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,uCAAuC;AACvC;EACE,sBAAsB;AACxB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sBAAsB;AACxB;AACA;EACE,yBAAyB;AAC3B;;AAEA,gBAAgB;AAChB;EACE,sCAAsC;AACxC;;AAEA,kBAAkB;AAClB;EACE;IACE,gBAAgB;EAClB;AACF",sourcesContent:["/* Base styles */\n:root {\n  --cell-size-desktop: 40px;\n  --cell-size-tablet: 35px;\n  --cell-size-mobile: 30px;\n  --gap-desktop: 50px;\n  --gap-tablet: 30px;\n  --gap-mobile: 20px;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 1rem;\n  min-height: 100vh;\n  margin: 0;\n}\n\n/* Score and Current Player */\n#score,\n#current-player,\n#message {\n  text-align: center;\n  margin-bottom: 0.5rem;\n  width: 100%;\n}\n\n/* Game Container */\n#game {\n  display: flex;\n  gap: var(--gap-desktop);\n  margin-top: 10px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n/* Player Sections */\n.player-section {\n  text-align: center;\n}\n\n/* Game Boards */\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, var(--cell-size-desktop));\n  grid-template-rows: repeat(10, var(--cell-size-desktop));\n  gap: 2px;\n  background-color: #eee;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.board-cell {\n  width: var(--cell-size-desktop);\n  height: var(--cell-size-desktop);\n  background-color: #fff;\n  border: 1px solid #ccc;\n  cursor: pointer;\n}\n\n/* Tablet Styles */\n@media screen and (max-width: 1024px) {\n  .board {\n    grid-template-columns: repeat(10, var(--cell-size-tablet));\n    grid-template-rows: repeat(10, var(--cell-size-tablet));\n  }\n\n  .board-cell {\n    width: var(--cell-size-tablet);\n    height: var(--cell-size-tablet);\n  }\n\n  #game {\n    gap: var(--gap-tablet);\n  }\n\n  h1 {\n    font-size: 1.8rem;\n  }\n\n  h2 {\n    font-size: 1.3rem;\n  }\n}\n\n/* Mobile Styles */\n@media screen and (max-width: 768px) {\n  .board {\n    grid-template-columns: repeat(10, var(--cell-size-mobile));\n    grid-template-rows: repeat(10, var(--cell-size-mobile));\n  }\n\n  .board-cell {\n    width: var(--cell-size-mobile);\n    height: var(--cell-size-mobile);\n  }\n\n  #game {\n    gap: var(--gap-mobile);\n    flex-direction: column;\n    align-items: center;\n  }\n\n  h1 {\n    font-size: 1.5rem;\n  }\n\n  h2 {\n    font-size: 1.2rem;\n  }\n\n  .player-section {\n    margin-bottom: 1rem;\n  }\n}\n\n/* Game Over Modal - make it responsive */\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  padding: 1rem;\n}\n\n.game-over-content {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  max-width: 90%;\n  width: auto;\n}\n\n.play-again-button {\n  padding: 0.8rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  margin-top: 1rem;\n}\n\n.play-again-button:hover {\n  background-color: #45a049;\n}\n\n/* Cell States - keep existing styles */\n.ship {\n  background-color: #666;\n}\n.hit {\n  background-color: #ff4444;\n}\n.miss {\n  background-color: #44aaff;\n}\n.sunk {\n  background-color: #000;\n}\n#player2-board .sunk {\n  background-color: #8b0000;\n}\n\n/* Transitions */\n.board-cell {\n  transition: background-color 0.3s ease;\n}\n\n/* Accessibility */\n@media (prefers-reduced-motion: reduce) {\n  .board-cell {\n    transition: none;\n  }\n}\n"],sourceRoot:""}]);const i=s},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var A=0;A<e.length;A++){var c=[].concat(e[A]);r&&s[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},s=[],i=0;i<e.length;i++){var l=e[i],A=r.base?l[0]+r.base:l[0],c=o[A]||0,d="".concat(A," ").concat(c);o[A]=c+1;var p=t(d),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(m);else{var u=a(m,r);r.byIndex=i,n.splice(i,0,{identifier:d,updater:u,references:1})}s.push(d)}return s}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var i=t(o[s]);n[i].references--}for(var l=r(e,a),A=0;A<o.length;A++){var c=t(o[A]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=l}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},e=>{e(e.s=897)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,